# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import query_pb2 as query__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in query_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QueryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryLogs = channel.unary_unary(
                '/query.QueryService/QueryLogs',
                request_serializer=query__pb2.QueryLogsRequest.SerializeToString,
                response_deserializer=query__pb2.QueryLogsResponse.FromString,
                _registered_method=True)
        self.SearchLogs = channel.unary_unary(
                '/query.QueryService/SearchLogs',
                request_serializer=query__pb2.SearchLogsRequest.SerializeToString,
                response_deserializer=query__pb2.SearchLogsResponse.FromString,
                _registered_method=True)
        self.GetLog = channel.unary_unary(
                '/query.QueryService/GetLog',
                request_serializer=query__pb2.GetLogRequest.SerializeToString,
                response_deserializer=query__pb2.GetLogResponse.FromString,
                _registered_method=True)
        self.GetErrorRate = channel.unary_unary(
                '/query.QueryService/GetErrorRate',
                request_serializer=query__pb2.GetErrorRateRequest.SerializeToString,
                response_deserializer=query__pb2.GetErrorRateResponse.FromString,
                _registered_method=True)
        self.GetLogVolume = channel.unary_unary(
                '/query.QueryService/GetLogVolume',
                request_serializer=query__pb2.GetLogVolumeRequest.SerializeToString,
                response_deserializer=query__pb2.GetLogVolumeResponse.FromString,
                _registered_method=True)
        self.GetTopErrors = channel.unary_unary(
                '/query.QueryService/GetTopErrors',
                request_serializer=query__pb2.GetTopErrorsRequest.SerializeToString,
                response_deserializer=query__pb2.GetTopErrorsResponse.FromString,
                _registered_method=True)
        self.GetUsageStats = channel.unary_unary(
                '/query.QueryService/GetUsageStats',
                request_serializer=query__pb2.GetUsageStatsRequest.SerializeToString,
                response_deserializer=query__pb2.GetUsageStatsResponse.FromString,
                _registered_method=True)


class QueryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetErrorRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogVolume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopErrors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsageStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLogs,
                    request_deserializer=query__pb2.QueryLogsRequest.FromString,
                    response_serializer=query__pb2.QueryLogsResponse.SerializeToString,
            ),
            'SearchLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchLogs,
                    request_deserializer=query__pb2.SearchLogsRequest.FromString,
                    response_serializer=query__pb2.SearchLogsResponse.SerializeToString,
            ),
            'GetLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLog,
                    request_deserializer=query__pb2.GetLogRequest.FromString,
                    response_serializer=query__pb2.GetLogResponse.SerializeToString,
            ),
            'GetErrorRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetErrorRate,
                    request_deserializer=query__pb2.GetErrorRateRequest.FromString,
                    response_serializer=query__pb2.GetErrorRateResponse.SerializeToString,
            ),
            'GetLogVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogVolume,
                    request_deserializer=query__pb2.GetLogVolumeRequest.FromString,
                    response_serializer=query__pb2.GetLogVolumeResponse.SerializeToString,
            ),
            'GetTopErrors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopErrors,
                    request_deserializer=query__pb2.GetTopErrorsRequest.FromString,
                    response_serializer=query__pb2.GetTopErrorsResponse.SerializeToString,
            ),
            'GetUsageStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsageStats,
                    request_deserializer=query__pb2.GetUsageStatsRequest.FromString,
                    response_serializer=query__pb2.GetUsageStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'query.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('query.QueryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/QueryLogs',
            query__pb2.QueryLogsRequest.SerializeToString,
            query__pb2.QueryLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/SearchLogs',
            query__pb2.SearchLogsRequest.SerializeToString,
            query__pb2.SearchLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/GetLog',
            query__pb2.GetLogRequest.SerializeToString,
            query__pb2.GetLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetErrorRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/GetErrorRate',
            query__pb2.GetErrorRateRequest.SerializeToString,
            query__pb2.GetErrorRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLogVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/GetLogVolume',
            query__pb2.GetLogVolumeRequest.SerializeToString,
            query__pb2.GetLogVolumeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTopErrors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/GetTopErrors',
            query__pb2.GetTopErrorsRequest.SerializeToString,
            query__pb2.GetTopErrorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsageStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/query.QueryService/GetUsageStats',
            query__pb2.GetUsageStatsRequest.SerializeToString,
            query__pb2.GetUsageStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
