"""initial_schema

Revision ID: a2dd1ac4850d
Revises: 
Create Date: 2025-10-10 23:03:33.442045

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a2dd1ac4850d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), nullable=False),
    sa.Column('password_hash', sa.CHAR(length=60), nullable=False),
    sa.Column('plan', sa.VARCHAR(length=20), nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("plan IN ('free', 'pro', 'enterprise')", name='check_account_plan'),
    sa.CheckConstraint("status IN ('active', 'suspended', 'deleted')", name='check_account_status'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_accounts_email', 'accounts', ['email'], unique=False)
    op.create_index('idx_accounts_status', 'accounts', ['status'], unique=False, postgresql_where=sa.text("status = 'active'"))
    op.create_index(op.f('ix_accounts_email'), 'accounts', ['email'], unique=True)
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('account_id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('slug', sa.VARCHAR(length=255), nullable=False),
    sa.Column('environment', sa.VARCHAR(length=20), nullable=False),
    sa.Column('retention_days', sa.SmallInteger(), nullable=False),
    sa.Column('daily_quota', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("environment IN ('production', 'staging', 'dev')", name='check_project_environment'),
    sa.CheckConstraint('daily_quota >= 1000', name='check_daily_quota'),
    sa.CheckConstraint('retention_days >= 1 AND retention_days <= 365', name='check_retention_days'),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_projects_account_id', 'projects', ['account_id'], unique=False)
    op.create_index('idx_projects_slug', 'projects', ['slug'], unique=False)
    op.create_index(op.f('ix_projects_account_id'), 'projects', ['account_id'], unique=False)
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_slug'), 'projects', ['slug'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('project_id', sa.BigInteger(), nullable=False),
    sa.Column('key_prefix', sa.VARCHAR(length=20), nullable=False),
    sa.Column('key_hash', sa.CHAR(length=60), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rate_limit_per_minute', sa.Integer(), nullable=False),
    sa.Column('rate_limit_per_hour', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("status IN ('active', 'revoked')", name='check_api_key_status'),
    sa.CheckConstraint('rate_limit_per_hour >= 100', name='check_rate_limit_per_hour'),
    sa.CheckConstraint('rate_limit_per_minute >= 10', name='check_rate_limit_per_minute'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_api_keys_key_hash', 'api_keys', ['key_hash'], unique=False)
    op.create_index('idx_api_keys_project_id', 'api_keys', ['project_id'], unique=False)
    op.create_index('idx_api_keys_validation', 'api_keys', ['key_hash', 'status', 'expires_at', 'project_id'], unique=False, postgresql_where=sa.text("status = 'active'"))
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.create_index(op.f('ix_api_keys_project_id'), 'api_keys', ['project_id'], unique=False)
    op.create_table('daily_usage',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('project_id', sa.BigInteger(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('logs_ingested', sa.BigInteger(), nullable=False),
    sa.Column('logs_queried', sa.BigInteger(), nullable=False),
    sa.Column('storage_bytes', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('logs_ingested >= 0', name='check_logs_ingested'),
    sa.CheckConstraint('logs_queried >= 0', name='check_logs_queried'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_daily_usage_project_date', 'daily_usage', ['project_id', 'date'], unique=False, postgresql_ops={'date': 'DESC'})
    op.create_index(op.f('ix_daily_usage_id'), 'daily_usage', ['id'], unique=False)
    op.create_index(op.f('ix_daily_usage_project_id'), 'daily_usage', ['project_id'], unique=False)
    op.create_index('uq_daily_usage_project_date', 'daily_usage', ['project_id', 'date'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_daily_usage_project_date', table_name='daily_usage')
    op.drop_index(op.f('ix_daily_usage_project_id'), table_name='daily_usage')
    op.drop_index(op.f('ix_daily_usage_id'), table_name='daily_usage')
    op.drop_index('idx_daily_usage_project_date', table_name='daily_usage', postgresql_ops={'date': 'DESC'})
    op.drop_table('daily_usage')
    op.drop_index(op.f('ix_api_keys_project_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index('idx_api_keys_validation', table_name='api_keys', postgresql_where=sa.text("status = 'active'"))
    op.drop_index('idx_api_keys_project_id', table_name='api_keys')
    op.drop_index('idx_api_keys_key_hash', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_projects_slug'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_account_id'), table_name='projects')
    op.drop_index('idx_projects_slug', table_name='projects')
    op.drop_index('idx_projects_account_id', table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.drop_index(op.f('ix_accounts_email'), table_name='accounts')
    op.drop_index('idx_accounts_status', table_name='accounts', postgresql_where=sa.text("status = 'active'"))
    op.drop_index('idx_accounts_email', table_name='accounts')
    op.drop_table('accounts')
    # ### end Alembic commands ###