services:
  # ==================== PostgreSQL ====================
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    ports:
      - "${AUTH_DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # ==================== Redis ====================
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    restart: unless-stopped
    env_file: .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes --requirepass ${REDIS_PASSWORD}

  # ==================== Auth Service ====================
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${AUTH_GRPC_PORT}:50051"
    networks:
      - backend
    command: python -m auth_service.main

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
